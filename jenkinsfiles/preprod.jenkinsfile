pipeline {
    agent any
    tools{
        maven 'maven-main'
        jfrog 'jfrog-cli-main'
    }
    environment {
        IMAGE_NAME = getImageName(env.CHANGE_TARGET, env.GIT_BRANCH)
        IMAGE_TAG = getImageTag(env.CHANGE_ID, env.BUILD_ID)
    }
    stages {
        stage ('printing env var'){
            steps{
                sh 'printenv'
            }
        }
        stage ('Build product microservice') {
            steps {
                sh "mvn -v"
                sh "mvn clean package"
            }
        }
        stage ('Build product docker image') {
            steps {
                script{
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_username_password_cred', passwordVariable: 'pwd', usernameVariable: 'user')]) {
                        sh "docker build -t ${user}/${IMAGE_NAME}:${IMAGE_TAG} -f Dockerfile.dev ."
                    }
                }
            }
        }
        stage('scanning docker image') {
            when {
                expression { env.CHANGE_TARGET }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub_username_password_cred', passwordVariable: 'pwd', usernameVariable: 'user')]) {
                    sh "trivy image --format json -o trivy-report.json ${user}/${IMAGE_NAME}:${IMAGE_TAG}"
                    archiveArtifacts artifacts: '**/trivy-report.json'
                }
            }
        }
        stage ('Push docker image to registry') {
            when {
                expression { !env.GIT_BRANCH } 
            }
            steps {
                script{
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_username_password_cred', passwordVariable: 'pwd', usernameVariable: 'user')]) {
                        sh "docker login -u ${user} -p ${pwd}"
                        sh "docker push ${user}/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }
    }
}

def getImageName(String changeTarget, String gitBranch) {
    if (changeTarget) {
        // Use CHANGE_TARGET for PR jobs
        return changeTarget.substring(changeTarget.indexOf('pre-prod/') + 'pre-prod/'.length())
    } else if (gitBranch) {
        // Use GIT_BRANCH for after-merge jobs
        return gitBranch.substring(gitBranch.indexOf('pre-prod/') + 'pre-prod/'.length())
    } else {
        error("Neither CHANGE_TARGET nor GIT_BRANCH is defined.")
    }
}

def getImageTag(String changeId, String buildTag) {
    if (changeId) {
        // Use "PR-BUILD_TAG" for PR jobs
        return "PR-${changeId}"
    } else {
        // Use "BUILD_TAG" for after-merge jobs
        return "${buildTag}"
    }
}