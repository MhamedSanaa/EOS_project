pipeline {
    agent any
    tools{
        maven 'maven-main'
        jfrog 'jfrog-cli-main'
    }
    environment {
        IMAGE_NAME = GIT_BRANCH.substring(GIT_BRANCH.indexOf('dev/') + 'dev/'.length())
        CI = true
        ARTIFACTORY_ACCESS_TOKEN = credentials('artifactory-access-token')
        SCANNER_HOME=tool 'sonarqube-scanner'
    }
    stages {
            stage ('printing env var'){
                steps{
                    sh 'printenv'
                }
            }
        stage ('compile project'){
            steps {
                sh 'mvn compile'
            }
        }
        stage ('Sonarqube analysis and dependency check') {
            parallel {
                stage ('Sonarqube analysis') {
                    steps {
                        withSonarQubeEnv(installationName: 'sonarqube-server'){
                            sh 'mvn sonar:sonar'
                        }
                        //timeout(time: 5, unit: 'MINUTES') {
                        //waitForQualityGate abortPipeline: true
                        //}
                    }
                }
                stage ('dependency check') {
                    steps {
                        dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'dependency-check-main'
                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                    }
                }
            }
        }
        stage ('Build product microservice') {
            steps {
                sh "mvn -v"
                sh "mvn clean package"
            }
        }
        /*stage ('upload to artifactory with plugin') {
            steps {
                jf "-v"
                jf "c show"
                jf "rt u ./target/ecomm-product-1.0.jar ecomm-product/"
            }
        }*/
        stage ('Build product docker image') {
            steps {
                script{
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_cred', passwordVariable: 'pwd', usernameVariable: 'user')]) {
                        sh "docker build -t ${user}/${IMAGE_NAME} ."
                    }
                }
            }
        }
        stage ('Push docker image to registry') {
            steps {
                script{
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_cred', passwordVariable: 'pwd', usernameVariable: 'user')]) {
                        sh "docker login -u ${user} -p ${pwd}"
                        sh "docker push ${user}/${IMAGE_NAME}"
                    }
                }
            }
        }
    }
}