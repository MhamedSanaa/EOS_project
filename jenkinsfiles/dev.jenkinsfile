//the higher branch from the preprod    will be the release     you will use verisoning realse-1.2 and tryin to work with versions will rely on pull request
//the higher branch from the dev        will be the pre-prod    used for testing env you will use kubernetes on vm plus other testing prams will rely on pull request
//this used for dev environment it build incoming changes from sub branches
//the lower branch from the dev         will be the local/feature you will vreate these branches from the dev branch of specific microservice to be devolopped localy then merge the branch back and delete to the dev branch
pipeline {
    agent any
    tools{
        maven 'maven-main'
        jfrog 'jfrog-cli-main'
    }
    environment {
        IMAGE_NAME = GIT_BRANCH.substring(GIT_BRANCH.indexOf('dev/') + 'dev/'.length())
        //CI = true
    }
    stages {
        stage ('printing env var'){
            steps{
                sh 'printenv'
            }
        }
        // stage ('compile project'){
        //     steps {
        //         sh 'mvn compile'
        //     }
        // }
        // stage ('Sonarqube analysis and dependency check') {
        //     parallel {
        //         stage ('Sonarqube analysis') {
        //             steps {
        //                 withSonarQubeEnv(installationName: 'sonarqube-server'){
        //                     sh 'mvn sonar:sonar'
        //                 }
        //                 timeout(time: 5, unit: 'MINUTES') {
        //                 waitForQualityGate abortPipeline: true
        //                 }
        //             }
        //         }
        //         stage ('dependency check') {
        //             steps {
        //                 dependencyCheck additionalArguments: '', odcInstallation: 'dependency-check-main'
        //                 dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //             }
        //         }
        //     }
        // }
        // stage ('Build product microservice') {
        //     steps {
        //         sh "mvn -v"
        //         sh "mvn clean package"
        //     }
        // }
        // stage ('upload to artifactory with plugin') {
        //     steps {
        //         jf "-v"
        //         jf "c show"
        //         jf "rt u --flat ./target/ecomm-product-1.0.jar ${IMAGE_NAME}/"
        //     }
        // }
    }
    post {
        success {
            script {
                withCredentials([usernamePassword(credentialsId: 'github_username_token_cred', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_TOKEN')]) {
                    // Set remote URL for authentication
                    sh "git remote set-url origin https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/MhamedSanaa/EOS_project.git"
                    
                    // Fetch all branches and tags
                    sh "git fetch --all"
                    sh "git fetch --tags"
                    
                    // List all branches (local and remote)
                    sh "git branch -a"
                    
                    // Ensure the local repository is up to date with remote references
                    sh "git remote update"
                    
                    // Prune deleted branches from the remote
                    sh "git remote prune origin"
                    
                    // List remote branches
                    sh "git branch -r"
                    
                    // Checkout the desired branch
                    sh "git checkout pre-prod/${IMAGE_NAME}"
                    
                    // Merge changes from the current branch
                    sh "git merge --strategy-option theirs origin/${env.GIT_BRANCH}"
                    
                    // Push changes to the remote branch
                    sh "git push origin pre-prod/${IMAGE_NAME}"
                }
            }
        }
    }
}