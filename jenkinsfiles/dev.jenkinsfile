pipeline {
    agent any
    tools{
        maven 'maven-main'
        jfrog 'jfrog-cli-main'
    }
    environment {
        IMAGE_NAME = GIT_BRANCH.substring(GIT_BRANCH.indexOf('dev/') + 'dev/'.length())
        //CI = true
    }
    stages {
        stage ('printing env var'){
            steps{
                sh 'printenv'
            }
        }
        stage ('compile project'){
            steps {
                sh 'mvn compile'
            }
        }
        stage ('Sonarqube analysis and dependency check') {
            parallel {
                stage ('Sonarqube analysis') {
                    steps {
                        withSonarQubeEnv(installationName: 'sonarqube-server'){
                            sh 'mvn sonar:sonar'
                        }
                        timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: false
                        }
                    }
                }
                stage ('dependency check') {
                    steps {
                        dependencyCheck additionalArguments: '--format XML --out dependency_report.xml', nvdCredentialsId: 'nvd_dependencycheck_token_cred', odcInstallation: 'dependency-check-main'
                        dependencyCheckPublisher pattern: '**/dependency_report.xml'
                        archiveArtifacts artifacts: '**/dependency_report.xml'
                    }
                }
            }
        }
        stage ('Build order microservice') {
            steps {
                sh "mvn -v"
                sh "mvn clean package"
            }
        }
        stage ('upload to artifactory with plugin') {
            steps {
                jf "-v"
                jf "c show"
                jf "rt u --flat ./target/ecomm-order-1.0.jar ${IMAGE_NAME}/"
            }
        }
    }
}