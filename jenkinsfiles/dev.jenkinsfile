//the higher branch from the preprod    will be the release     you will use verisoning realse-1.2 and tryin to work with versions will rely on pull request
//the higher branch from the dev        will be the pre-prod    used for testing env you will use kubernetes on vm plus other testing prams will rely on pull request
//this used for dev environment it build incoming changes from sub branches
//the lower branch from the dev         will be the local/feature you will vreate these branches from the dev branch of specific microservice to be devolopped localy then merge the branch back and delete to the dev branch
pipeline {
    agent any
    environment {
        CI = false
        IMAGE_NAME = GIT_BRANCH.substring(GIT_BRANCH.indexOf('dev/') + 'dev/'.length())
        FRONTEND_HOST="localhost"
        BACKEND_HOST="localhost"
        FRONTEND_PORT="8888"
        BACKEND_PORT="8091"
        REACT_APP_SERVER_BASE_URL="http://${BACKEND_HOST}:${BACKEND_PORT}"
        REACT_APP_WS_BASE_URL="ws://${FRONTEND_HOST}:${FRONTEND_PORT}"
        NODE_ENV="production"
        PUBLIC_URL="http://${FRONTEND_HOST}:${FRONTEND_PORT}"
    }
    stages {
        stage ('printing env var'){
            steps{
                sh 'printenv'
            }
        }
        /*stage ('build project'){
            steps {
                sh 'npm install'
                sh 'npm run build'
            }
        }*/
        stage ('Build product docker image') {
            steps {
                script{
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_username_password_cred', passwordVariable: 'pwd', usernameVariable: 'user')]) {
                        sh "docker build -t ${user}/${IMAGE_NAME}:${BUILD_ID} -f Dockerfile.dev ."
                    }
                }
            }
        }
        stage ('Push docker image to registry') {
            steps {
                script{
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_username_password_cred', passwordVariable: 'pwd', usernameVariable: 'user')]) {
                        sh "docker login -u ${user} -p ${pwd}"
                        sh "docker push ${user}/${IMAGE_NAME}:${BUILD_ID}"
                    }
                }
            }
        }
        // stage ('Sonarqube analysis and dependency check') {
        //     parallel {
        //         stage ('Sonarqube analysis') {
        //             steps {
        //                 withSonarQubeEnv(installationName: 'sonarqube-server'){
        //                     sh 'mvn sonar:sonar'
        //                 }
        //                 timeout(time: 5, unit: 'MINUTES') {
        //                 waitForQualityGate abortPipeline: true
        //                 }
        //             }
        //         }
        //         stage ('dependency check') {
        //             steps {
        //                 dependencyCheck additionalArguments: '', odcInstallation: 'dependency-check-main'
        //                 dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //             }
        //         }
        //     }
        // }
    }
}