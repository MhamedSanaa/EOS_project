//the higher branch from the preprod    will be the release     you will use verisoning realse-1.2 and tryin to work with versions will rely on pull request
//the higher branch from the dev        will be the pre-prod    used for testing env you will use kubernetes on vm plus other testing prams will rely on pull request
//this used for dev environment it build incoming changes from sub branches
//the lower branch from the dev         will be the local/feature you will vreate these branches from the dev branch of specific microservice to be devolopped localy then merge the branch back and delete to the dev branch
pipeline {
    agent any
    tools{
        maven 'maven-main'
        jfrog 'jfrog-cli-main'
    }
    environment {
        IMAGE_NAME = GIT_BRANCH.substring(GIT_BRANCH.indexOf('dev/') + 'dev/'.length())
        //CI = true
    }
    stages {
        stage ('printing env var'){
            steps{
                sh 'printenv'
            }
        }
        stage ('compile project'){
            steps {
                sh 'mvn compile'
            }
        }
        stage ('Sonarqube analysis and dependency check') {
            parallel {
                stage ('Sonarqube analysis') {
                    steps {
                        withSonarQubeEnv(installationName: 'sonarqube-server'){
                            sh 'mvn sonar:sonar'
                        }
                        timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                        }
                    }
                }
                stage ('dependency check') {
                    steps {
                        dependencyCheck additionalArguments: '', odcInstallation: 'dependency-check-main'
                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                        archiveArtifacts artifacts: '**/dependency-check-report.xml'
                    }
                }
            }
        }
        stage ('Build user microservice') {
            steps {
                sh "mvn -v"
                sh "mvn clean package"
            }
        }
        stage ('upload to artifactory with plugin') {
            steps {
                jf "-v"
                jf "c show"
                jf "rt u --flat ./target/ecomm-user-1.0.jar ${IMAGE_NAME}/"
            }
        }
    }
}